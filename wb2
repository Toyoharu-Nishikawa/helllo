import {parseURL,getMatchURL, parseParameters} from "../../modules/url.js"
import {createUUID} from "../../modules/uuid.js"


const App = class{
  constructor(){
    this.methodMap = new Map([
      ["DELETE", new Map()],
      ["GET", new Map()],
      ["POST", new Map()],
      ["PUSH", new Map()],
      ["PUT", new Map()],
      ["UPDATE", new Map()],
    ])
  }
  add(method, url, func){
    const methodMap = this.methodMap.get(method)
    methodMap.set(url, func)
  }
  handleMessage(req, res){
    const header = req.header
    console.log("header", header)
    console.log(req, res)

    switch(header){
      case "RESPONSE": {
        const requestId = req.requestId
        const data = req.body
        console.log("data", data)
        const ev = new CustomEvent(requestId, {detail: {data:data}})
        document.dispatchEvent(ev)
        break
      }
      case "REQUEST": {
        console.log("REQUEST", req)

        const requestId = req.requestId
        const requestUUID = req.requestUUID

        const f = (body) => {
          const obj = {
            header: "RESPONSE",
            requestId: requestId,
            requestUUID: requestUUID,
            body: body,
          }
          res.postMessage(obj)
        } 
        res.json = f
        const method = req.method
        const url = req.url
    
        const urlMap = this.methodMap.get(method) 
        if(urlMap ===undefined){
          //throw new Error(`method ${method} does not match`)
          const errorMessage = `method ${method} is not defined`
          console.log(errorMessage)
          const obj = {errorMessage: errorMessage} 
          res.json(obj)
          return
        }

        const matchURL = getMatchURL(url,urlMap)
        console.log("matchURL", matchURL)

        const func = urlMap.get(matchURL)
        if(func ===undefined){
          //throw new Error(`url: ${url} is no defined`)
          const errorMessage = `url: ${url} is no defined`
          console.log(errorMessage)
          const obj = {errorMessage: errorMessage} 
          res.json(obj)
          return 
        }
        const params = parseParameters(url, matchURL)
        console.log("params",params)
        req.params = params

        func(req, res)
        break
      }
    }
  }
} 

const MessageAPI = class{
  constructor(){
    this.port= null 
    this.fullName= null 
    this.name= null 
    this.appId= null 
    this.app = new App()
  }
  initialize(e){
    this.port = e.ports[0]
    this.fullName = e.data.fullName
    this.name = e.data.name
    this.appId= e.data.appId
    this.port.start()
    this.setReceiver()
  }
  setReceiver(){
    const self = this
    const f = e => {
      const req = e.data
      const res = e.target
      self.app.handleMessage(req, res)
    }
    this.port.onmessage = f
  }
  send(message){
    this.port.postMessage(message)
  }
  async fetch(obj, requestId){
    const self = this
    const prom =  new Promise((resolve,reject)=>{
      document.addEventListener(requestId, (e)=>{resolve(e.detail.data)}, {once:true});
      self.send(obj)
    })
    return prom
  }
}
 


const	Transceiver = class{
  constructor(){
    this.messageAPI = new MessageAPI()
  }
  initialize(e){
    this.messageAPI.initialize(e)
  }
  async fetch(URL, objTmp){
    //@params
    //obj = {
    //  body: Object(),
    //  method: String(),// "DELETE", "GET", "POST", "PUSH", "PUT", "UPDATE"
    //  url: String(), // "/", "/getResult"
    //  header: String(), // request, response
    // source : {
    //  name: String(), // "wbb" (my name)
    //  fullName: String(), //"wbb.1"  (my full name)
    //  id: Number(), //1  (my id)
    //  label: String(), // wbb_test 
    //},
    //  requestId: String(), //2134534322.fetch.GET
    //  stream: String(), // "UPSTREAM", "DOWNSTREAM", "UP-DOWNSTREAM", "GLOBAL"
    //  identifier: String() || Number() || [String()] || [Number()], //"wb_test" ,  1, ["wb_test"][1, 2]
    //  target: String(), // "wba"
    //  query: JSON(), // {input:1, output:2} 
    //}
    const methodList = ["GET", "POST", "DELETE", "PUT", "PUSH", "UPDATE"]
    const streamList = ["UPSTREAM", "DOWNSTREAM", "UPSTREAM_DOWNSTREAM", "GLOBAL"]
    const identifierList = ["NAME", "FULLNAME", "LABEL"]

    const obj = typeof objTmp ==="object" ? objTmp : {} 

    const method = obj?.method
    const stream = obj?.stream
    const identifier = obj?.identifier
    obj.method = method ===undefined ? "GET" : 
                 !methodList.includes(method)? "GET":
                 method 

    obj.stream = stream ===undefined ? "UPSTREAM" :
                 !streamList.includes(stream)? "UPSTREAM":
                 stream
    obj.identifier = identifier ===undefined ? "NAME" :
                     !identifierList.includes(identifier)? "NAME":
                     identifier 

    const {target, url, query} = parseURL(URL)
    obj.url = url
    obj.header = "REQUEST"
    obj.source = {
      name: this.messageAPI.name,
      fullName: this.messageAPI.fullName,
      appId: this.messageAPI.appId
    }
    obj.target = target
    obj.url = url
    obj.query = query

    const uuid = createUUID()
    const requestId = uuid + ".FETCH"+"." + method

    obj.requestId = requestId
    console.log("request", obj)

    if(method =="PUSH"){
      this.messageAPI.send(obj)
      return 
    }

    const self = this
    const results = self.messageAPI.fetch(obj, requestId)

    return results
  }
}


export const Workbench = class{
  constructor(){
    this.transceiver = null
    this.initialize()
  }
  initialize(){
    this.transceiver = new Transceiver()
    const self = this
    const f = (e)=>{
      self.transceiver.initialize(e)
      window.onmessage = null
    }
    window.onmessage = f 
  }
  async getAppInfo(){
    const appInfo = await this.transceiver.fetch("/WORKBENCH/appInfo")
    return appInfo
  }
  getMyName(){
    const fullName = this.transceiver.messageAPI.fullName
    const name = this.transceiver.messageAPI.name
    const id = this.transceiver.messageAPI.id
    const obj = {fullName, name, id}
    return obj
  }
  express(){
    const Delete = (url, func) => {
      this.transceiver.messageAPI.app.add("DELETE", url, func)
    }
    const get = (url, func) => {
      this.transceiver.messageAPI.app.add("GET", url, func)
    }
    const post = (url, func) => {
      this.transceiver.messageAPI.app.add("POST", url, func)
    }
    const push = (url, func) => {
      this.transceiver.messageAPI.app.add("PUSH", url, func)
    }
    const put  = (url, func) => {
      this.transceiver.messageAPI.app.add("PUT", url, func)
    }
    const update = (url, func) => {
      this.transceiver.messageAPI.app.add("UPDATE", url, func)
    }

    const obj = {delete:Delete, get, post, push, put, update}
    return obj
  }
  async fetch(URL,obj){
    return await this.transceiver.fetch(URL, obj)
  }
}

